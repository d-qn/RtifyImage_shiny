distinct(x, y, c, v) %>%
mutate(
across(c(x, y, c), as.numeric),
# map v (0-255) to vf (0-1), in order to use for alpha
vf = c / 255,
# offset for "pixels"
x = case_when(
v == "green" ~ x + 0.3,
v == "blue" ~ x + 0.6,
TRUE ~ x
)
)
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
aspect.ratio = image_ratio,
plot.background = element_rect(fill = "black", color = NA))
}
img[[1]] %>%
portraitRgb(image_ratio = img[[2]])
img %>%
portraitSplitbar()
img[[1]] %>%
portraitSplitbar()
img %>%
portraitBspline(image_ratio = img[[2]])
img[[1]] %>%
portraitBspline(image_ratio = img[[2]])
shiny::runApp('~/Google Drive/dataJournalism/RtifyImage_shiny/rtify')
shinyApp(ui, server)
shinyApp(
ui = shinyUI(
fluidRow(
fileInput("myFile", "Choose a file", accept = c('image/png', 'image/jpeg'))
)
),
server = shinyServer(function(input, output,session){
observeEvent(input$myFile, {
inFile <- input$myFile
if (is.null(inFile))
return()
file.copy(inFile$datapath, file.path("c:/temp", inFile$name) )
})
})
)
shinyApp(
ui = shinyUI(
fluidRow(
fileInput("myFile", "Choose a file", accept = c('image/png', 'image/jpeg'))
)
),
server = shinyServer(function(input, output,session){
observeEvent(input$myFile, {
inFile <- input$myFile
if (is.null(inFile))
return()
file.copy(inFile$datapath, file.path("c:/temp", inFile$name) )
})
})
)
shinyApp(ui, server)
ui <- shinyUI(
fluidRow(
fileInput("myFile", "Choose a file", accept = c('image/png', 'image/jpeg'))
)
)
server <- shinyServer(function(input, output,session){
observeEvent(input$myFile, {
inFile <- input$myFile
if (is.null(inFile))
return()
file.copy(inFile$datapath, file.path("c:/temp", inFile$name) )
})
})
shinyApp(ui, server)
runApp('~/Google Drive/dataJournalism/RtifyImage_shiny/rtify')
setwd("~/Google Drive/dataJournalism/RtifyImage_shiny/rtify")
source("../dev/rtify_helper.R")
runApp()
runApp()
inFile
inFile$datapath
loadImageResize(inFile$datapath)
runApp()
img()
img()[[1]]
runApp()
runApp()
install.packages("shinybrowser")
remotes::install_github("daattali/shinybrowser")
library(shiny)
library(shinybrowser)
shinybrowser::detect()
runApp()
runApp()
runApp()
runApp()
runApp()
vp_width
vp_width()
""
runApp()
vp_width
vp_width()
vp_width()
runApp()
shinybrowser::get_width()
shinybrowser::get_width()
shinybrowser::get_all_info()
traceback()
runApp()
shinybrowser::get_all_info()
observe({
shinybrowser::get_width()
})
observe({
shinybrowser::get_all_info()
})
observe({
shinybrowser::get_all_info()
})
observe({
cat(shinybrowser::get_all_info())
})
observe({
cat(shinybrowser::get_all_info())
})
observe({
str(shinybrowser::get_all_info())
})
runApp()
runApp()
?loadImageResize
loadImageResize
runApp()
runApp()
runApp()
ff
str(ff)
ff(img[[1]])
img[[1]]
str(img)
runApp()
library(shinythemes)
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
input$upload
+Q
runApp()
artype <- reactive(input$rtype)
runApp()
runApp()
install.packages("colourpicker")
runApp()
runApp()
runApp()
runApp()
source("rtify_helper.R")
#filepath <- "images/duc.png"
filepath <- "images/keanu.jpg"
img <- loadImageResize(filepath, longest_dim = 80)
img[[1]] %>%
portaitAscii()
img[[1]] %>%
portraitPoint (shape = 17)
img[[1]] %>%
portraitLine()
img[[1]] %>%
portraitRgb(image_ratio = img[[2]])
img[[1]] %>%
portraitSplitbar()
img[[1]] %>%
portraitBspline(image_ratio = img[[2]])
img[[1]] %>%
portraitSplitbar()
source('~/Google Drive/dataJournalism/RtifyImage_shiny/dev/RtifyPortrait.R')
source("rtify_helper.R")
#filepath <- "images/duc.png"
filepath <- "images/keanu.jpg"
img <- loadImageResize(filepath, longest_dim = 80)
img[[1]] %>%
portaitAscii()
img[[1]] %>%
portraitPoint (shape = 17)
img[[1]] %>%
portraitLine()
img[[1]] %>%
portraitRgb(image_ratio = img[[2]])
img[[1]] %>%
portraitSplitbar()
img[[1]] %>%
portraitBspline(image_ratio = img[[2]])
img[[1]] %>%
portraitRgb(image_ratio = img[[2]])
runApp()
runApp()
setwd("~/Google Drive/dataJournalism/RtifyImage_shiny/portraits/portraits rgb")
library(ggplot2)
library(dplyr)
library(magick)
# Read in image and convert to grayscale
img <- image_read("portraits/images/keanu.jpg")
# Get dimensions
img_w <- image_info(img)$width
img_h <- image_info(img)$height
img_ratio <- img_w / img_h
# Resize the longest dimension to 80 pixels
if (img_w >= img_h) {
img <- image_resize(img, "80")
} else {
img <- image_resize(img, ("x80"))
}
# Get channels
r <- image_channel(img, channel = "red")
g <- image_channel(img, channel = "green")
b <- image_channel(img, channel = "blue")
# Here I should make a function or loop, but how?
img_array_r <- drop(as.integer(r[[1]]))
rownames(img_array_r) <- 1:nrow(img_array_r)
colnames(img_array_r) <- 1:ncol(img_array_r)
img_array_b <- drop(as.integer(b[[1]]))
rownames(img_array_b) <- 1:nrow(img_array_b)
colnames(img_array_b) <- 1:ncol(img_array_b)
img_array_g <- drop(as.integer(g[[1]]))
rownames(img_array_g) <- 1:nrow(img_array_g)
colnames(img_array_g) <- 1:ncol(img_array_g)
# Make data frame for each channel
img_df_r <- as.data.frame.table(img_array_r) %>%
mutate(Var3 = "red")
img_df_g <- as.data.frame.table(img_array_g) %>%
mutate(Var3 = "green")
img_df_b <- as.data.frame.table(img_array_b) %>%
mutate(Var3 = "blue")
# rbind all channel data frames
img_df <- rbind(img_df_r, img_df_g, img_df_b) %>%
`colnames<-`(c("y", "x", "c", "v")) %>%
distinct(x, y, c, v) %>%
mutate(
across(c(x, y, c), as.numeric),
# map v (0-255) to vf (0-1), in order to use for alpha
vf = c / 255,
# offset for "pixels"
x = case_when(
v == "green" ~ x + 0.3,
v == "blue" ~ x + 0.6,
TRUE ~ x
)
)
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
plot.background = element_rect(fill = "black", color = NA))
setwd("~/Google Drive/dataJournalism/RtifyImage_shiny/portraits/portraits rgb")
library(ggplot2)
library(dplyr)
library(magick)
# Read in image and convert to grayscale
img <- image_read("portraits/images/keanu.jpg")
# Get dimensions
img_w <- image_info(img)$width
img_h <- image_info(img)$height
img_ratio <- img_w / img_h
# Resize the longest dimension to 80 pixels
if (img_w >= img_h) {
img <- image_resize(img, "80")
} else {
img <- image_resize(img, ("x80"))
}
# Get channels
r <- image_channel(img, channel = "red")
g <- image_channel(img, channel = "green")
b <- image_channel(img, channel = "blue")
# Here I should make a function or loop, but how?
img_array_r <- drop(as.integer(r[[1]]))
rownames(img_array_r) <- 1:nrow(img_array_r)
colnames(img_array_r) <- 1:ncol(img_array_r)
img_array_b <- drop(as.integer(b[[1]]))
rownames(img_array_b) <- 1:nrow(img_array_b)
colnames(img_array_b) <- 1:ncol(img_array_b)
img_array_g <- drop(as.integer(g[[1]]))
rownames(img_array_g) <- 1:nrow(img_array_g)
colnames(img_array_g) <- 1:ncol(img_array_g)
# Make data frame for each channel
img_df_r <- as.data.frame.table(img_array_r) %>%
mutate(Var3 = "red")
img_df_g <- as.data.frame.table(img_array_g) %>%
mutate(Var3 = "green")
img_df_b <- as.data.frame.table(img_array_b) %>%
mutate(Var3 = "blue")
# rbind all channel data frames
img_df <- rbind(img_df_r, img_df_g, img_df_b) %>%
`colnames<-`(c("y", "x", "c", "v")) %>%
distinct(x, y, c, v) %>%
mutate(
across(c(x, y, c), as.numeric),
# map v (0-255) to vf (0-1), in order to use for alpha
vf = c / 255,
# offset for "pixels"
x = case_when(
v == "green" ~ x + 0.3,
v == "blue" ~ x + 0.6,
TRUE ~ x
)
)
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
plot.background = element_rect(fill = "black", color = NA))
getwd()
# Read in image and convert to grayscale
img <- image_read("../portraits/images/keanu.jpg")
getwd()
# Read in image and convert to grayscale
img <- image_read("../images/keanu.jpg")
# Get dimensions
img_w <- image_info(img)$width
source('~/Google Drive/dataJournalism/RtifyImage_shiny/portraits/portraits rgb/rgb-portraits.R')
library(ggplot2)
library(dplyr)
library(magick)
# Read in image and convert to grayscale
img <- image_read("../images/keanu.jpg")
# Get dimensions
img_w <- image_info(img)$width
img_h <- image_info(img)$height
img_ratio <- img_w / img_h
# Resize the longest dimension to 80 pixels
if (img_w >= img_h) {
img <- image_resize(img, "80")
} else {
img <- image_resize(img, ("x80"))
}
# Get channels
r <- image_channel(img, channel = "red")
g <- image_channel(img, channel = "green")
b <- image_channel(img, channel = "blue")
# Here I should make a function or loop, but how?
img_array_r <- drop(as.integer(r[[1]]))
rownames(img_array_r) <- 1:nrow(img_array_r)
colnames(img_array_r) <- 1:ncol(img_array_r)
img_array_b <- drop(as.integer(b[[1]]))
rownames(img_array_b) <- 1:nrow(img_array_b)
colnames(img_array_b) <- 1:ncol(img_array_b)
img_array_g <- drop(as.integer(g[[1]]))
rownames(img_array_g) <- 1:nrow(img_array_g)
colnames(img_array_g) <- 1:ncol(img_array_g)
# Make data frame for each channel
img_df_r <- as.data.frame.table(img_array_r) %>%
mutate(Var3 = "red")
img_df_g <- as.data.frame.table(img_array_g) %>%
mutate(Var3 = "green")
img_df_b <- as.data.frame.table(img_array_b) %>%
mutate(Var3 = "blue")
# rbind all channel data frames
img_df <- rbind(img_df_r, img_df_g, img_df_b) %>%
`colnames<-`(c("y", "x", "c", "v")) %>%
distinct(x, y, c, v) %>%
mutate(
across(c(x, y, c), as.numeric),
# map v (0-255) to vf (0-1), in order to use for alpha
vf = c / 255,
# offset for "pixels"
x = case_when(
v == "green" ~ x + 0.3,
v == "blue" ~ x + 0.6,
TRUE ~ x
)
)
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
plot.background = element_rect(fill = "black", color = NA))
# ggsave("portraits/portraits rgb/plots/keanu-rgb.png", width = 8, height = 8 / img_ratio)
source('~/Google Drive/dataJournalism/RtifyImage_shiny/portraits/portraits rgb/rgb-portraits.R')
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
aspect.ratio = img_ratio,
plot.background = element_rect(fill = "black", color = NA))
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
aspect.ratio = img_ratio / 2,
plot.background = element_rect(fill = "black", color = NA))
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
aspect.ratio = img_ratio * 2,
plot.background = element_rect(fill = "black", color = NA))
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
aspect.ratio = img_ratio * 1.1,
plot.background = element_rect(fill = "black", color = NA))
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
aspect.ratio = img_ratio * 1.2,
plot.background = element_rect(fill = "black", color = NA))
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
aspect.ratio = img_ratio * 1.4,
plot.background = element_rect(fill = "black", color = NA))
source('~/Google Drive/dataJournalism/RtifyImage_shiny/portraits/portraits rgb/rgb-portraits.R')
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
aspect.ratio = 1 / img_ratio ,
plot.background = element_rect(fill = "black", color = NA))
ggplot(img_df) +
geom_rect(aes(xmin = x, xmax = x + 0.3, ymin = y, ymax = y + 0.9, fill = v, alpha = vf), color = NA) +
scale_y_reverse() +
scale_fill_identity() +
scale_alpha_identity() +
# Set expand to TRUE for "frame" around plot
coord_cartesian(expand = FALSE) +
theme_void() +
theme(legend.position = "none",
aspect.ratio = 1 / img_ratio ,
plot.background = element_rect(fill = "black", color = NA))
shiny::runApp('~/Google Drive/dataJournalism/RtifyImage_shiny/rtify')
runApp('~/Google Drive/dataJournalism/RtifyImage_shiny/rtify')
install.packages("thematic")
runApp('~/Google Drive/dataJournalism/RtifyImage_shiny/rtify')
setwd("~/Google Drive/dataJournalism/RtifyImage_shiny/rtify")
runApp()
runApp()
runApp()
runApp()
portraitRgb
portraitPoint
runApp()
portraitSplitbar
portraitPoint()
portraitPoint
portraitLin
portraitLine
shiny::runApp()
?navbarPage
runApp()
runApp()
runApp()
